@startuml "Impact Evaluator ERD"
title "Impact Evaluator ERD"

'skinparam linetype ortho

package "IE Governance (meta)" as IEGovernance {
    class ObjectivesDesigner {}
    class ScopesDesigner {}
    class MeasurementDesigner {}
    class EvaluationDesigner {}
    class RewardDesigner {}
    class Treasury {}

    ObjectivesDesigner -d[hidden]-> ScopesDesigner
    ScopesDesigner -r[hidden]-> MeasurementDesigner
    MeasurementDesigner -r[hidden]-> EvaluationDesigner
    EvaluationDesigner -r[hidden]-> RewardDesigner
    RewardDesigner -r[hidden]-> Treasury

    ObjectivesDesigner --> ScopesDesigner : orients
    ObjectivesDesigner --> MeasurementDesigner : orients
    ObjectivesDesigner --> EvaluationDesigner : orients
    ObjectivesDesigner --> RewardDesigner : orients
}

package Impact {
    class ImpactOrganization {
        identity
    }
    class ImpactProject {
        organization
    }
    class ImpactScope {
        project
        epoch or timeInterval
    }
    class ImpactClaim {
        scope
        timeInterval
        extra data
    }
    note left of ImpactClaim
        Vehicle for ImpactContributor
        entities to communicate
        outcomes to Measurers
    end note
    class ImpactContributor {
        identity
    }

    ImpactOrganization "1" -d-> "*" ImpactProject : facilitates
    ImpactProject "1" -d-> "*" ImpactScope : divides\ninto
    ImpactScope "1" -d-> "*" ImpactClaim : contains
    ImpactContributor "1" -u-> "*" ImpactClaim : claims
    ImpactContributor "1" -u-> "1" ImpactOrganization : belongs to
}

package Measure {
    class Measurement {
        indicator
        entity
        timeInterval
    }
    class Measurer {
        identity
    }

    ImpactClaim --> Measurer : submitted to

    Measurer "1" --> "*" Measurement : takes
    Measurement "*" -l-> "1" ImpactClaim : measures
    Measurement::entity "1" --> "1" ImpactContributor : credits
}

package Evaluate {
    class EvaluationResult {
        timestamp
    }
    class Evaluator {
        identity
    }

    Evaluator "1" -d-> "*" EvaluationResult : performs
    EvaluationResult "1" -l-> "*" Measurement : evaluates
    EvaluationResult --> EvaluationResult : "\n> depends on"
}

package Reward {
    class RewardCalculator {}
    class RewardAllocation {
        amount
        recipient
        impactClaimId
    }
    class PayoutProcessor {
        identity
    }

    RewardCalculator "1" -r-> "*" RewardAllocation : calculates
    RewardAllocation "1" -d-> "*" PayoutProcessor : authorizes
}

Impact -r[hidden]--> Measure
Evaluate -r[hidden]--> Reward
Measurement -r[hidden]--> Evaluation
Evaluation -r[hidden]--> RewardCalculator

ScopesDesigner "1" --> "*" ImpactScope : designs
MeasurementDesigner "1" --> "*" Measurer : designs
EvaluationDesigner "1" --> "*" Evaluator : designs
RewardDesigner "1" --> "*" RewardCalculator : designs

Treasury --> PayoutProcessor : funds

EvaluationResult "1" --> "*" RewardCalculator : steers >
PayoutProcessor "1" -d-> "*" ImpactContributor : pays

FundingSource "*" --> "1" Treasury : funds

'ExternalMarkets -d[norank]-> RewardAllocation : values

@enduml
