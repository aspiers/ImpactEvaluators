
@startuml "MERIter ERD"
' !pragma layout smetana

!$PROJECT_NAME = "MERIter"
!$DIAGRAM_TYPE = "Entity Relationship Diagram (ERD)"
!ifndef FULL_TITLE
!$FULL_TITLE = $PROJECT_NAME + " " + $DIAGRAM_TYPE
!endif

' Configuration variables
!ifndef SHOW_FIELDS
!define SHOW_FIELDS "false"
!endif
!ifndef SHOW_EAS_FIELDS
!define SHOW_EAS_FIELDS "false"
!endif
!ifndef VISIBLE_PACKAGES
!define VISIBLE_PACKAGES "Governance,Impact,Measure,Evaluate,Reward"
!endif

' Helper function to check if package is visible
!function $isPackageVisible($packageName)
  !return %strpos(VISIBLE_PACKAGES, $packageName) != -1
!endfunction

title $FULL_TITLE

!if (SHOW_FIELDS == "false")
hide empty fields
!endif

<style>
document {
    title {
        FontSize 32
        FontStyle bold
    }
}
package {
    title {
        FontSize 18
    }
    LineColor #666666
}
classDiagram {
    class {
        BackgroundColor #55555511
    }
    arrow {
        LineColor #0055A9
        FontColor #0055A9
    }
    class, entity, note {
        ' LineColor white
        ' BackgroundColor white
        ' BorderColor white
        ' FontColor white
    }
}
spot {
    spotEntity, spotDataClass {
        ' LineColor white
        ' BackgroundColor white
        ' BorderColor white
        ' FontColor white
    }
}
</style>

'skinparam linetype ortho

!if ($isPackageVisible("Governance"))

package "Governance (meta)" as Governance {
    entity ObjectivesDesigner [[{The ObjectivesDesigner is responsible for defining high-level goals and objectives that orient the entire impact evaluation system.}]]
    entity ScopesDesigner [[{The ScopesDesigner is responsible for defining and structuring impact scopes that divide projects into measurable units.}]]
    entity MeasurementDesigner [[{The MeasurementDesigner is responsible for designing measurement methodologies and configuring how measurements should be taken.}]]
    entity EvaluationDesigner [[{The EvaluationDesigner is responsible for designing evaluation criteria and methodologies for assessing measurements.}]]
    entity RewardDesigner [[{The RewardDesigner is responsible for designing reward policies and distribution mechanisms for impact contributors.}]]
    entity Treasury [[{The Treasury is a pool of funds available for rewarding impact contributions and funding operations.}]]

    RewardDesigner -r[hidden]-> Treasury
    ScopesDesigner -r[hidden]-> MeasurementDesigner
    MeasurementDesigner -r[hidden]-> EvaluationDesigner
    EvaluationDesigner -r[hidden]-> RewardDesigner

    ObjectivesDesigner "1" --> "1" ScopesDesigner : orients
    ObjectivesDesigner "1" --> "1" MeasurementDesigner : orients
    ObjectivesDesigner "1" --> "1" EvaluationDesigner : orients
    ObjectivesDesigner "1" --> "1" RewardDesigner : orients
}
!endif

!if ($isPackageVisible("Impact"))
package Impact {
    entity TheoryOfChange [[{The TheoryOfChange is a framework that describes how and why desired changes are expected to happen in a particular context.}]]

    entity ImpactOrganization [[{The ImpactOrganization is an entity that facilitates and oversees impact projects and their contributors.}]] {
        !if (SHOW_FIELDS == "true")
        organizationDID
        !endif
    }
    entity ImpactProject [[{The ImpactProject is a specific initiative aimed at creating measurable positive impact within defined scopes.}]] {
        !if (SHOW_FIELDS == "true")
        organization
        !endif
    }
    entity ImpactWork [[{The ImpactWork is the actual work performed by contributors that generates impact within a project.}]]
    dataclass ImpactScope [[{The ImpactScope is a piece of structured data defining boundaries and timeframes for measuring impact within a project.}]] {
        !if (SHOW_FIELDS == "true")
        projectUID
        epoch or timeInterval
        !if (SHOW_EAS_FIELDS == "true")
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    dataclass ImpactClaim [[{The ImpactClaim is a structured piece of data serving as a vehicle for ImpactContributor entities to group communicate outcomes to Measurers}]] {
        !if (SHOW_FIELDS == "true")
        scope
        timeInterval
        extra data
        !if (SHOW_EAS_FIELDS == "true")
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }

    entity ImpactContributor [[{The ImpactContributor is a human and/or digital entity that performs work and claims impact within projects.}]] {
        !if (SHOW_FIELDS == "true")
        workDecisionPolicy
        !endif
    }

    TheoryOfChange -d-> ImpactProject : orients
    ImpactOrganization "1" -d-> "*" ImpactProject : facilitates
    ImpactProject "1" -d-> "*" ImpactScope : divides\ninto
    ImpactScope "1" -d-> "*" ImpactClaim : contains
    ImpactContributor "*" -u-> "*" ImpactClaim : claims
    ImpactContributor "*" --> "*" ImpactWork : > contributes
    ImpactContributor::workDecisionPolicy "1" -l-> "*" ImpactWork : > gates
    ImpactClaim "*" --> "*" ImpactWork : > represents
    ImpactContributor "*" -up--> "*" ImpactOrganization : > belongs to
}
!endif

!if ($isPackageVisible("Measure"))
package Measure {
    dataclass Measurement [[{The Measurement is a piece of structured data capturing specific indicators and metrics related to impact claims.}]] {
        !if (SHOW_FIELDS == "true")
        impactClaimId
        indicator
        timeInterval
        entity
        !if (SHOW_EAS_FIELDS == "true")
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    entity Measurer [[{The Measurer is a human and/or digital entity responsible for taking measurements of impact claims and outcomes.}]]

    Measurer "1" --> "*" Measurement : takes
}
!endif

!if ($isPackageVisible("Evaluate"))
package Evaluate {
    dataclass EvaluationResult [[{The EvaluationResult is a piece of structured data describing the output of an Evaluator running an evaluation.}]] {
        !if (SHOW_FIELDS == "true")
        timestamp
        !endif
    }
    entity Evaluator [[{The Evaluator is a human and/or digital entity responsible for evaluating measurements and (optionally) other evaluations, and outputting evaluation results.}]]

    Evaluator "1" -d-> "*" EvaluationResult : "calculates    "
    EvaluationResult "*" -u-> "*" Evaluator : "cascaded\nto"
}
!endif

!if ($isPackageVisible("Reward"))
package Reward {
    entity RewardCalculator [[{The RewardCalculator is responsible for calculating reward allocations based on evaluation results and reward policies.}]] {
      !if (SHOW_FIELDS == "true")
      rewardPolicy
      !endif
    }
    dataclass RewardAllocation [[{The RewardAllocation is a piece of structured data specifying the amount and recipient of rewards for impact contributions.}]] {
        !if (SHOW_FIELDS == "true")
        amount
        recipient
        impactClaimId
        !endif
    }
    entity RewardDistributor [[{The RewardDistributor is responsible for executing the distribution of rewards to impact contributors.}]]

    RewardCalculator "1" -d-> "*" RewardAllocation : calculates
    RewardAllocation "*" -r-> "1" RewardDistributor : authorizes
}
!endif

' Package ordering - create consistent left-to-right layout
!if ($isPackageVisible("Impact"))
!if ($isPackageVisible("Measure"))
Impact -r[hidden]-> Measure
ImpactClaim -r[hidden]-> Measurer
!endif
!if ($isPackageVisible("Evaluate"))
Impact -r[hidden]-> Evaluate
!endif
!if ($isPackageVisible("Reward"))
Impact -r[hidden]-> Reward
!endif
!endif

!if ($isPackageVisible("Measure"))
!if ($isPackageVisible("Evaluate"))
Measure -r[hidden]-> Evaluate
!endif
!if ($isPackageVisible("Reward"))
Measure -r[hidden]-> Reward
!endif
!endif

!if ($isPackageVisible("Evaluate") && $isPackageVisible("Reward"))
Evaluate -r[hidden]-> Reward
EvaluationResult -r[hidden]-> RewardDistributor
!endif

!if ($isPackageVisible("Governance"))
entity FundingSource [[{The FundingSource is an external entity that provides funds to the treasury for rewarding impact.}]]
FundingSource "*" -d-> "1" Treasury : funds

!if ($isPackageVisible("Impact"))
TheoryOfChange -d[hidden]-> ScopesDesigner
TheoryOfChange --> EvaluationDesigner : orients
TheoryOfChange --> MeasurementDesigner : orients
ImpactScope "*" <-l- "1" ScopesDesigner : designs
!endif
!if ($isPackageVisible("Measure"))
MeasurementDesigner "1" -d-> "*" Measurer : designs
!endif
!if ($isPackageVisible("Evaluate"))
EvaluationDesigner "1" -d-> "*" Evaluator : designs
!endif
!if ($isPackageVisible("Reward"))
RewardDesigner "1" --> "1" RewardCalculator : designs
Treasury "1" --> "1" RewardDistributor : funds
!endif
!endif

!if ($isPackageVisible("Impact") && $isPackageVisible("Measure"))
ImpactClaim "*" --> "*" Measurer : "submitted to /\ndiscovered by /\nself-reported by"
ImpactClaim "1" <-l- "*" Measurement::impactClaimId : measures
ImpactContributor "*" <-l- "*" Measurement::entity : credits
!endif
!if ($isPackageVisible("Evaluate") && $isPackageVisible("Measure"))
Measurement "*" <-l- "1" EvaluationResult : evaluates
Measurement "*" --> "*" Evaluator : "ingested\nby"
!endif
!if ($isPackageVisible("Evaluate") && $isPackageVisible("Reward"))
EvaluationResult "1" --> "1" RewardCalculator : steers >
!endif
!if ($isPackageVisible("Reward") && $isPackageVisible("Impact"))
ImpactContributor "*" <-u-- "1" RewardDistributor : < rewards
ImpactContributor::workDecisionPolicy "*" <-l[norank]-- "1" RewardCalculator : < influences
!endif

!if ($isPackageVisible("Reward"))
entity ExternalWorld [[{The ExternalWorld represents external stakeholders and systems that value and benefit from the impact work.}]]
ExternalWorld "1" -u-> "*" RewardAllocation : values
!endif

@enduml
