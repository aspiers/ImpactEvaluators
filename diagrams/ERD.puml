
@startuml "MERIter ERD"
' !pragma layout smetana

!$PROJECT_NAME = "MERIter"
!$DIAGRAM_TYPE = "Entity Relationship Diagram (ERD)"
!$FULL_TITLE = $PROJECT_NAME + " " + $DIAGRAM_TYPE

' Configuration variables
!$SHOW_FIELDS = %false()
!$SHOW_EAS_FIELDS = %false()
!$VISIBLE_PACKAGES = "Governance,Impact,Measure,Evaluate,Reward"

' Helper function to check if package is visible
!function $isPackageVisible($packageName)
  !return %strpos($VISIBLE_PACKAGES, $packageName) != -1
!endfunction

title $FULL_TITLE

!if (%not($SHOW_FIELDS))
hide empty fields
!endif

<style>
document {
    title {
        FontSize 32
        FontStyle bold
    }
}
package {
    title {
        FontSize 18
    }
}
classDiagram {
    class {
        BackgroundColor #55555511
    }
    class, arrow, entity, note {
        ' LineColor white
        ' BackgroundColor white
        ' BorderColor white
        ' FontColor white
    }
}
spot {
    spotEntity, spotDataClass {
        ' LineColor white
        ' BackgroundColor white
        ' BorderColor white
        ' FontColor white
    }
}
</style>

'skinparam linetype ortho

!if ($isPackageVisible("Governance"))
package "Governance (meta)" as Governance {
    entity ObjectivesDesigner
    entity ScopesDesigner
    entity MeasurementDesigner
    entity EvaluationDesigner
    entity RewardDesigner
    entity Treasury

    ScopesDesigner -r[hidden]-> MeasurementDesigner
    MeasurementDesigner -r[hidden]-> EvaluationDesigner
    EvaluationDesigner -r[hidden]-> RewardDesigner
    RewardDesigner -r[hidden]-> Treasury

    ObjectivesDesigner "1" --> "1" ScopesDesigner : orients
    ObjectivesDesigner "1" --> "1" MeasurementDesigner : orients
    ObjectivesDesigner "1" --> "1" EvaluationDesigner : orients
    ObjectivesDesigner "1" --> "1" RewardDesigner : orients
}
!endif

!if ($isPackageVisible("Impact"))
package Impact {
    entity ImpactOrganization {
        !if ($SHOW_FIELDS)
        organizationDID
        !endif
    }
    entity ImpactProject {
        !if ($SHOW_FIELDS)
        organization
        !endif
    }
    entity ImpactWork
    dataclass ImpactScope {
        !if ($SHOW_FIELDS)
        projectUID
        epoch or timeInterval
        !if ($SHOW_EAS_FIELDS)
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    dataclass ImpactClaim [[{Vehicle for ImpactContributor entities to communicate outcomes to Measurers}]] {
        !if ($SHOW_FIELDS)
        scope
        timeInterval
        extra data
        !if ($SHOW_EAS_FIELDS)
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }

    entity ImpactContributor {
        !if ($SHOW_FIELDS)
        workDecisionPolicy
        !endif
    }

    ImpactOrganization "1" -d-> "*" ImpactProject : facilitates
    ImpactProject "1" -d-> "*" ImpactScope : divides\ninto
    ImpactScope "1" -d-> "*" ImpactClaim : contains
    ImpactContributor "*" -u-> "*" ImpactClaim : claims
    ImpactContributor "*" --> "*" ImpactWork : > contributes
    ImpactContributor::workDecisionPolicy "1" -l-> "*" ImpactWork : > gates
    ImpactClaim "*" --> "*" ImpactWork : > represents
    ImpactContributor "*" -up--> "*" ImpactOrganization : > belongs to
}
!endif

!if ($isPackageVisible("Measure"))
package Measure {
    dataclass Measurement {
        !if ($SHOW_FIELDS)
        impactClaimId
        indicator
        timeInterval
        entity
        !if ($SHOW_EAS_FIELDS)
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    entity Measurer

    Measurer "1" --> "*" Measurement : takes
}
!endif

!if ($isPackageVisible("Evaluate"))
package Evaluate {
    dataclass EvaluationResult {
        !if ($SHOW_FIELDS)
        timestamp
        !endif
    }
    entity Evaluator

    Evaluator "1" -d-> "*" EvaluationResult : "calculates    "
    EvaluationResult "*" -u-> "*" Evaluator : "cascaded\nto"
}
!endif

!if ($isPackageVisible("Reward"))
package Reward {
    entity RewardCalculator
    dataclass RewardAllocation {
        !if ($SHOW_FIELDS)
        amount
        recipient
        impactClaimId
        !endif
    }
    entity RewardDistributor

    RewardCalculator "1" -d-> "*" RewardAllocation : calculates
    RewardAllocation "*" -r-> "1" RewardDistributor : authorizes
}
!endif

' Package ordering - create consistent left-to-right layout
!if ($isPackageVisible("Impact"))
!if ($isPackageVisible("Measure"))
Impact -r[hidden]-> Measure
ImpactClaim -r[hidden]-> Measurer
!endif
!if ($isPackageVisible("Evaluate"))
Impact -r[hidden]-> Evaluate
!endif
!if ($isPackageVisible("Reward"))
Impact -r[hidden]-> Reward
!endif
!endif

!if ($isPackageVisible("Measure"))
!if ($isPackageVisible("Evaluate"))
Measure -r[hidden]-> Evaluate
!endif
!if ($isPackageVisible("Reward"))
Measure -r[hidden]-> Reward
!endif
!endif

!if ($isPackageVisible("Evaluate") && $isPackageVisible("Reward"))
Evaluate -r[hidden]-> Reward
EvaluationResult -r[hidden]-> RewardDistributor
!endif

!if ($isPackageVisible("Governance") && $isPackageVisible("Impact"))
ImpactScope "*" <-l- "1" ScopesDesigner : designs
!endif
!if ($isPackageVisible("Governance") && $isPackageVisible("Measure"))
MeasurementDesigner "1" -d-> "*" Measurer : designs
!endif
!if ($isPackageVisible("Governance") && $isPackageVisible("Evaluate"))
EvaluationDesigner "1" -d-> "*" Evaluator : designs
!endif
!if ($isPackageVisible("Governance"))
entity FundingSource
FundingSource "*" -d[norank]-> "1" Treasury : funds
!endif

!if ($isPackageVisible("Governance") && $isPackageVisible("Reward"))
RewardDesigner "1" --> "1" RewardCalculator : designs
Treasury "1" --> "1" RewardDistributor : funds
!endif

!if ($isPackageVisible("Impact") && $isPackageVisible("Measure"))
ImpactClaim "*" --> "*" Measurer : "submitted to /\ndiscovered by /\nself-reported by"
ImpactClaim "1" <-l- "*" Measurement::impactClaimId : measures
ImpactContributor "*" <-l- "*" Measurement::entity : credits
!endif
!if ($isPackageVisible("Evaluate") && $isPackageVisible("Measure"))
Measurement "*" <-l- "1" EvaluationResult : evaluates
Measurement "*" --> "*" Evaluator : "ingested\nby"
!endif
!if ($isPackageVisible("Evaluate") && $isPackageVisible("Reward"))
EvaluationResult "1" --> "1" RewardCalculator : steers >
!endif
!if ($isPackageVisible("Reward") && $isPackageVisible("Impact"))
ImpactContributor "*" <-u-- "1" RewardDistributor : < rewards
ImpactContributor::workDecisionPolicy "*" <-u-- "1" RewardDistributor : < influences
!endif

!if ($isPackageVisible("Reward"))
entity ExternalWorld
ExternalWorld "1" -u-> "*" RewardAllocation : values
!endif

@enduml
