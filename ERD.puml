@startuml "Impact Evaluator ERD"
title "Impact Evaluator ERD"

'skinparam linetype ortho

package "IE Governance (meta)" as IEGovernance {
    entity ObjectivesDesigner
    entity ScopesDesigner
    entity MeasurementDesigner
    entity EvaluationDesigner
    entity RewardDesigner
    entity Treasury

    ObjectivesDesigner -d[hidden]-> ScopesDesigner
    ScopesDesigner -r[hidden]-> MeasurementDesigner
    MeasurementDesigner -r[hidden]-> EvaluationDesigner
    EvaluationDesigner -r[hidden]-> RewardDesigner
    RewardDesigner -r[hidden]-> Treasury

    ObjectivesDesigner --> ScopesDesigner : orients
    ObjectivesDesigner --> MeasurementDesigner : orients
    ObjectivesDesigner --> EvaluationDesigner : orients
    ObjectivesDesigner --> RewardDesigner : orients
}

package Impact {
    entity ImpactOrganization {
        identity
    }
    entity ImpactProject {
        organization
    }
    dataclass ImpactScope {
        project
        epoch or timeInterval
    }
    dataclass ImpactClaim {
        scope
        timeInterval
        extra data
    }
    note left of ImpactClaim
        Vehicle for ImpactContributor
        entities to communicate
        outcomes to Measurers
    end note
    entity ImpactContributor {
        identity
    }

    ImpactOrganization "1" -d-> "*" ImpactProject : facilitates
    ImpactProject "1" -d-> "*" ImpactScope : divides\ninto
    ImpactScope "1" -d-> "*" ImpactClaim : contains
    ImpactContributor "1" -u-> "*" ImpactClaim : claims
    ImpactContributor "1" -u-> "1" ImpactOrganization : belongs to
}

package Measure {
    dataclass Measurement {
        indicator
        timeInterval
        entity
    }
    entity Measurer {
        identity
    }

    ImpactClaim --> Measurer : submitted to

    Measurer "1" --> "*" Measurement : takes
    Measurement "*" -l-> "1" ImpactClaim : measures
    Measurement::entity "1" --> "1" ImpactContributor : credits
}

package Evaluate {
    dataclass EvaluationResult {
        timestamp
    }
    entity Evaluator {
        identity
    }

    Evaluator "1" -d-> "*" EvaluationResult : performs
    EvaluationResult "1" -l-> "*" Measurement : evaluates
    EvaluationResult --> EvaluationResult : "\n> depends on"
}

package Reward {
    entity RewardCalculator {}
    dataclass RewardAllocation {
        amount
        recipient
        impactClaimId
    }
    entity PayoutProcessor {
        identity
    }

    RewardCalculator "1" -r-> "*" RewardAllocation : calculates
    RewardAllocation "1" -d-> "*" PayoutProcessor : authorizes
}

Impact -r[hidden]--> Measure
Measure -r[hidden]--> Evaluate
Evaluate -r[hidden]--> Reward

ScopesDesigner "1" --> "*" ImpactScope : designs
MeasurementDesigner "1" --> "*" Measurer : designs
EvaluationDesigner "1" --> "*" Evaluator : designs
RewardDesigner "1" --> "*" RewardCalculator : designs

entity FundingSource
FundingSource "*" --> "1" Treasury : funds
Treasury --> PayoutProcessor : funds

EvaluationResult "1" --> "*" RewardCalculator : steers >
PayoutProcessor "1" -d-> "*" ImpactContributor : pays

'ExternalMarkets -d[norank]-> RewardAllocation : values

@enduml
