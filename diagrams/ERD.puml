
@startuml "MERIter ERD"
' !pragma layout smetana

!$PROJECT_NAME = "MERIter"
!$DIAGRAM_TYPE = "Entity Relationship Diagram (ERD)"
!$FULL_TITLE = $PROJECT_NAME + " " + $DIAGRAM_TYPE

' Configuration variables
!$SHOW_FIELDS = %false()
!$SHOW_EAS_FIELDS = %false()

title $FULL_TITLE

!if (%not($SHOW_FIELDS))
hide empty fields
!endif

<style>
document {
    title {
        FontSize 32
        FontStyle bold
    }
}
package {
    title {
        FontSize 18
    }
}
classDiagram {
    class {
        BackgroundColor #55555511
    }
    class, arrow, entity, note {
        ' LineColor white
        ' BackgroundColor white
        ' BorderColor white
        ' FontColor white
    }
}
spot {
    spotEntity, spotDataClass {
        ' LineColor white
        ' BackgroundColor white
        ' BorderColor white
        ' FontColor white
    }
}
</style>

'skinparam linetype ortho

package "IE Governance (meta)" as IEGovernance {
    entity ObjectivesDesigner
    entity ScopesDesigner
    entity MeasurementDesigner
    entity EvaluationDesigner
    entity RewardDesigner
    entity Treasury

    ScopesDesigner -r[hidden]-> MeasurementDesigner
    MeasurementDesigner -r[hidden]-> EvaluationDesigner
    EvaluationDesigner -r[hidden]-> RewardDesigner
    RewardDesigner -r[hidden]-> Treasury

    ObjectivesDesigner "1" --> "1" ScopesDesigner : orients
    ObjectivesDesigner "1" --> "1" MeasurementDesigner : orients
    ObjectivesDesigner "1" --> "1" EvaluationDesigner : orients
    ObjectivesDesigner "1" --> "1" RewardDesigner : orients
}

package Impact {
    entity ImpactOrganization {
        !if ($SHOW_FIELDS)
        organizationDID
        !endif
    }
    entity ImpactProject {
        !if ($SHOW_FIELDS)
        organization
        !endif
    }
    entity ImpactWork
    dataclass ImpactScope {
        !if ($SHOW_FIELDS)
        projectUID
        epoch or timeInterval
        !if ($SHOW_EAS_FIELDS)
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    dataclass ImpactClaim {
        !if ($SHOW_FIELDS)
        scope
        timeInterval
        extra data
        !if ($SHOW_EAS_FIELDS)
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    note left of ImpactClaim
        Vehicle for ImpactContributor
        entities to communicate
        outcomes to Measurers
    end note

    entity ImpactContributor {
        !if ($SHOW_FIELDS)
        workDecisionPolicy
        !endif
    }

    ImpactOrganization "1" -d-> "*" ImpactProject : facilitates
    ImpactProject "1" -d-> "*" ImpactScope : divides\ninto
    ImpactScope "1" -d-> "*" ImpactClaim : contains
    ImpactContributor "*" -u-> "*" ImpactClaim : claims
    ImpactContributor "*" --> "*" ImpactWork : > contributes
    ImpactContributor::workDecisionPolicy "1" -l-> "*" ImpactWork : > gates
    ImpactClaim "*" --> "*" ImpactWork : > represents
    ImpactContributor "*" -up--> "*" ImpactOrganization : > belongs to
}

package Measure {
    dataclass Measurement {
        !if ($SHOW_FIELDS)
        impactClaimId
        indicator
        timeInterval
        entity
        !if ($SHOW_EAS_FIELDS)
        --
        uid
        schema
        refUID
        time (of creation)
        expirationTime
        revocationTime
        recipient
        attester
        revocable
        !endif
        !endif
    }
    entity Measurer

    ImpactClaim "*" --> "*" Measurer : "submitted to\n(or discovered by)    "

    Measurer "1" --> "*" Measurement : takes
    Measurement::impactClaimId "*" -l-> "1" ImpactClaim : measures
    Measurement::entity "*" --> "*" ImpactContributor : credits
}

package Evaluate {
    dataclass EvaluationResult {
        !if ($SHOW_FIELDS)
        timestamp
        !endif
    }
    entity Evaluator

    EvaluationResult "1" -l-> "*" Measurement : evaluates
    Evaluator "1" -d-> "*" EvaluationResult : "calculates    "
    EvaluationResult "*" -u-> "*" Evaluator : "cascaded\nto"
}

package Reward {
    entity RewardCalculator
    dataclass RewardAllocation {
        !if ($SHOW_FIELDS)
        amount
        recipient
        impactClaimId
        !endif
    }
    entity RewardDistributor

    RewardCalculator "1" -d-> "*" RewardAllocation : calculates
    RewardAllocation "*" -r-> "1" RewardDistributor : authorizes
}

Impact -r[hidden]--> Measure
Measure -r[hidden]--> Evaluate
Evaluate -r[hidden]--> Reward

ScopesDesigner "1" --> "*" ImpactScope : designs
MeasurementDesigner "1" --> "*" Measurer : designs
EvaluationDesigner "1" --> "*" Evaluator : designs
RewardDesigner "1" --> "1" RewardCalculator : designs

entity FundingSource
FundingSource "*" --> "1" Treasury : funds
Treasury "1" --> "1" RewardDistributor : funds

Measurement "*" --> "*" Evaluator : "ingested     \nby     "
EvaluationResult "1" --> "1" RewardCalculator : steers >
RewardDistributor "1" ---> "*" ImpactContributor : > rewards
RewardDistributor "1" ---> "*" ImpactContributor::workDecisionPolicy : > influences

entity ExternalWorld
ExternalWorld "1" -u-> "*" RewardAllocation : values

@enduml
